Aula 5 - Ciclo de Vida do Componente

Exercicio 1:

import { useState, useEffect } from "react";

export default function App() {
  const [name, setName] = useState("");
  const [age, setAge] = useState("");

  useEffect(() => {
    const storedName = localStorage.getItem("name");
    const storedAge = localStorage.getItem("age");

    if (storedName) {
      setName(storedName);
    }
    if (storedAge) {
      setAge(storedAge);
    }
  }, []);

  useEffect(() => {
    if (name) {
      localStorage.setItem("name", name);
    }
  }, [name]);

  useEffect(() => {
    if (age) {
      localStorage.setItem("age", age);
    }
  }, [age]);

  return (
    <>
      <div>
        <label htmlFor="name">Nome</label>
        <input
          id="name"
          value={name}
          onChange={(e) => setName(e.target.value)}
        />
      </div>
      <div>
        <label htmlFor="age">Idade</label>
        <input id="age" value={age} onChange={(e) => setAge(e.target.value)} />
      </div>
      <div>Nome: {name}</div>
      <div>Idade: {age}</div>
    </>
  );
}

Exercicio 2:

import { createContext, useContext, useEffect, useState } from "react";

export default function App() {
  return (
    <UserProvider>
      <Form />
      <List />
    </UserProvider>
  );
}

interface ContextProps {
  users: User[];
  add: (user: User) => void;
}

interface User {
  name: string;
  age: string;
}

interface ChildrenProps {
  children: React.ReactNode;
}

const UserContext = createContext<ContextProps | null>(null);

function UserProvider({ children }: ChildrenProps) {
  const [users, setUsers] = useState<User[]>([]);

  useEffect(() => {
    const storedUsers = localStorage.getItem('users');
    if (storedUsers) {
      setUsers(JSON.parse(storedUsers));
    }
  }, []);

  function add(user: User) {
    setUsers((prev) => {
      const newUsers = [...prev, user];
      localStorage.setItem('users', JSON.stringify(newUsers));
      return newUsers;
    });
  }

  return (
    <UserContext.Provider value={{ users, add }}>
      {children}
    </UserContext.Provider>
  );
}

function useUserContext() {
  const context = useContext(UserContext);
  if (!context) {
    throw new Error("useUserContext deve ser usado dentro de um UserProvider");
  }
  return context;
}

function Form() {
  const { add } = useUserContext();
  const [name, setName] = useState("");
  const [age, setAge] = useState("");

  return (
    <div>
      <div>
        <label htmlFor="name">Nome</label>
        <input
          id="name"
          value={name}
          onChange={(e) => setName(e.target.value)}
        />
      </div>
      <div>
        <label htmlFor="age">Idade</label>
        <input id="age" value={age} onChange={(e) => setAge(e.target.value)} />
      </div>
      <div>
        <button onClick={() => {
          add({ name, age });
          setName("");
          setAge("");
        }}>Salvar</button>
      </div>
    </div>
  );
}

function List() {
  const { users } = useUserContext();
  return (
    <ol>
      {users.map((item, index) => (
        <li key={index}>
          {item.name} - {item.age}
        </li>
      ))}
    </ol>
  );
}

Exercicio 3:

import {
  createContext,
  CSSProperties,
  useContext,
  useEffect,
  useState,
} from "react";

export default function App() {
  return (
    <SourceProvider>
      <div>
        <Button label="A" />
        <Button label="B" />
        <Button label="C" />
        <Button label="D" />
      </div>
      <List />
    </SourceProvider>
  );
}

interface ButtonProps {
  label: string;
}

interface ContextProps {
  sources: string[];
  add: (value: string) => void;
}

interface ChildrenProps {
  children: React.ReactNode;
}

const SourceContext = createContext<ContextProps | null>(null);

function SourceProvider({ children }: ChildrenProps) {
  const [sources, setSources] = useState<string[]>([]);

  useEffect(() => {
    const storedSources = localStorage.getItem("clickedButtons");
    if (storedSources) {
      setSources(JSON.parse(storedSources));
    }
  }, []);

  function add(value: string) {
    setSources((prev) => {
      const newSources = [...prev, value];
      localStorage.setItem("clickedButtons", JSON.stringify(newSources));
      return newSources;
    });
  }

  return (
    <SourceContext.Provider value={{ sources, add }}>
      {children}
    </SourceContext.Provider>
  );
}

function useSourceContext() {
  const context = useContext(SourceContext);
  if (!context) {
    throw new Error(
      "useSourceContext deve ser usado dentro de um SourceProvider"
    );
  }
  return context;
}

function Button({ label }: ButtonProps) {
  const { add } = useSourceContext();
  return (
    <button style={buttonStyle} onClick={() => add(label)}>
      {label}
    </button>
  );
}

function List() {
  const { sources } = useSourceContext();
  return (
    <ol>
      {sources.map((item, index) => (
        <li key={index}>{item}</li>
      ))}
    </ol>
  );
}

const buttonStyle: CSSProperties = {
  backgroundColor: "#567196",
  color: "white",
  padding: "10px 20px",
  marginRight: "10px",
  fontSize: "16px",
  fontWeight: "bold",
  border: "none",
  borderRadius: "5px",
  cursor: "pointer",
};
